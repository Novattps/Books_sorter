from database.sqlite import Database, path_to_database

# Создаем экземпляр класса Database для работы с базой данных
db = Database(path_to_database)


# основная функция для работы с приложением
def start_app():
    # запускаем бесконечный цикл
    while True:
        # формируем стартовое сообщение
        start_msg = (f'1. Добавить книгу\n'
                     f'2. Просмотреть список книг\n'
                     f'3. Найти книгу\n'
                     f'4. Удалить книгу\n'
                     f'0. Завершить работу')
        # выводим начальное меню
        print(start_msg)
        # ожидаем ввода нужного действия от пользователя
        choice = input("\nВыберите действие: ")
        # проверяем, какое действие требуется пользователю
        if choice == '1':
            # начинаем процесс заполнения формы для добавления игры
            print('Для добавления игры, заполните форму:')
            # запрашиваем название книги
            book_name = input('Введите название книги: ')
            # запрашиваем автора книги
            author = input('Введите автора книги: ')
            # запрашиваем описание книги
            description = input('Введите описание книги: ')
            # получаем список всех книг из базы данных
            old_books = db.get_all_books()
            # формируем список из жанров книг которые уже есть в базе данных
            old_books_genre = {book[3] for book in old_books}
            # если в списке есть значения - выводим его
            if len(old_books_genre) >= 1:
                print(f"\nЖанры книг которые вы уже добавили: "
                      f"{','.join(old_books_genre)}\n")
            # запрашиваем жанр книги
            genre = input('Введите жанр книги: ')
            # добавляем книгу в базу данных с учетом введенных данных
            db.add_book(book_name, author, description, genre)
            print(f'\nКнига {book_name} успешно добавлена в базу данных\n')
        elif choice == '2':
            # получаем список всех книг из базы данных
            all_books = db.get_all_books()
            # проверяем наличие книг в базе данных
            if len(all_books) >= 1:
                print('\nСписок книг в формате - номер. название книги, автор')
                # нумеруем список и выводим его с помощью цикла
                for i, book in enumerate(all_books, start=1):
                    # заносим название книги и автора в переменные для ясности кода
                    book_name = book[0]
                    book_author = book[1]
                    print(f'{i}. {book_name}, {book_author}')
                # переносим строку для более приятного вывода
                print()
                # получаем количество книг в базе данных
                count_books = len(all_books)
                # запрашиваем данные от пользователя
                choice_book = input(f'Вы можете ввести номер книги от 1 до {count_books} для просмотра более '
                                    f'подробной информации, или ввести жанр, чтобы получить список книг этого жанра (0 - для отмены): ')
                # проверка на отмену действия
                if choice_book != '0':
                    # проверка на числовой ввод
                    if choice_book.isdigit():
                        # проверка на ввод одного из доступных номеров книги
                        if int(choice_book) <= count_books:
                            # получаем индекс книги в базе данных, отнимаем единицу для получения корректного
                            # индекса так как список выводился с единицы
                            index = int(choice_book) - 1
                            # получаем книгу из списка всех книг по индексу
                            book_info = all_books[index]
                            # формируем сообщение со всей информацией по книге
                            msg = book_info_msg(book_info)
                            print(msg)
                        else:
                            print('\nВы ввели номер книги которой нет в базе данных\n')
                    else:
                        # создаем пустой список
                        books = []
                        # создаем счетчик книг которые подходят по введенному жанру для корректного отображения
                        # пользователю
                        count_good = 0
                        # пробегаемся циклом по книгам
                        for book in all_books:
                            # заносим жанр в отдельную переменку
                            book_genre = book[3]
                            # проверяем, является ли введенный пользователем жанр жанром книги из базы данных
                            if book_genre == choice_book:
                                # формируем сообщение со всей информацией по книге
                                msg = book_info_msg(book)
                                # добавляем сообщение в список букс
                                books += msg
                                # прибавляем единицу к счетчику
                                count_good += 1
                        # проверка на наличие хороших книг в списке, можно было бы сделать просто if books:
                        if count_good >= 1:
                            print(f'\nВыведено {count_good} книг(а) с жанром - {choice_book}')
                            print(''.join(books))
                        else:
                            print(f'\nВ базе данных нет книг жанра - {choice_book}\n')
                else:
                    print('\nДействие отменено\n')
            else:
                print('\nВ базе данных нет книг\n')
        elif choice == '3':
            write_book_info = input('Введите ключевое слово по которому будут искаться книги '
                                    '(автора или название книги): ')
            # создаем пустой список в который будем помещать книги в которых будет найдено ключевое слово
            good_books = []
            # задаем счетчик
            count_good = 0
            # получаем список всех книг из базы данных
            all_books = db.get_all_books()
            # проверяем, есть ли книги в базе данных
            if len(all_books) >= 1:
                # пробегаемся циклом по книгам из бд
                for book in all_books:
                    # заносим данные в переменные
                    book_name = book[0]
                    book_author = book[1]
                    # проверка на наличие ключевого слова в названии книги или авторе
                    if write_book_info in book_name or write_book_info in book_author:
                        # формируем - добавляем сообщение в список гуд букс
                        good_books += book_info_msg(book)
                        # прибавляем единицу к счетчику
                        count_good += 1
                # проверяем, нашли ли мы книги по ключевым словам
                if count_good >= 1:
                    print(f'\nБыло найдено {count_good} книг(а) по ключевому слову {write_book_info}')
                    print("".join(good_books))
                else:
                    print(f'\nМы не нашли книг по ключевому слову {write_book_info}\n')
            else:
                print('\nВ базе данных нет книг\n')
        elif choice == '4':
            # получаем список всех книг из базы данных
            all_books = db.get_all_books()
            # проверяем, есть ли книги в базе данных
            if len(all_books) >= 1:
                print('\nСписок книг в формате - номер. название книги, автор')
                # нумеруем список и выводим его с помощью цикла
                for i, book in enumerate(all_books, start=1):
                    # заносим название книги и автора в переменные для хахахахаах
                    book_name = book[0]
                    book_author = book[1]
                    print(f'{i}. {book_name}, {book_author}')
                print()
                # запрашиваем номер книги и заносим в переменную
                del_book_number = input('Введите номер книги, которую хотите удалить (0 - для отмены): ')
                # проверка на отмену действия
                if del_book_number != '0':
                    # проверка на числовой ввод
                    if del_book_number.isdigit():
                        # проверка на ввод одного из доступных номеров книги
                        if int(del_book_number) <= len(all_books):
                            # получаем индекс книги в базе данных, отнимаем единицу для получения корректного
                            # индекса так как список выводился с единицы
                            index = int(del_book_number) - 1
                            # получаем книгу из списка всех книг по индексу
                            del_book_info = all_books[index]
                            # заносим название книги и автора в переменные
                            del_book_name = del_book_info[0]
                            del_book_author = del_book_info[1]
                            # удаляем книгу из базы данных
                            db.delete_book(del_book_name)
                            print(f'\nКнига {del_book_name}, {del_book_author} удалена из базы данных\n')
                        else:
                            print('\nВы ввели номер книги которой нет в базе данных\n')
                    else:
                        print('\nВвод должен быть числовым\n')
                else:
                    print('\nДействие отменено\n')
            else:
                print('\nВ базе данных нет книг\n')
        elif choice == '0':
            # завершаем работу приложения
            print('\nВы завершили работу с играми\n')
            break
        else:
            # проверка на ввод который не относится к предложенным вариантам
            print('\nНеправильный формат ввода, введите одно из предложенных чисел\n')


# функция для формирования красивого сообщения информации о книге
def book_info_msg(book_info):
    msg = (f'\nНазвание: {book_info[0]}\n'
           f'Автор: {book_info[1]}\n'
           f'Описание: {book_info[2]}\n'
           f'Жанр: {book_info[3]}\n')
    return msg
